{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/profileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceHolder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/loginForm.tsx","features/errors/ValidationErrors.tsx","features/users/registerForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","displayname","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosparams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","setActiveTab","loadProfile","photo","photos","isMain","p","activityStore","followingCount","loadFollowings","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","Reveal","animated","Content","visible","width","fluid","color","hidden","basic","e","preventDefault","handleFollow","Card","Header","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","size","circular","bordered","ActivityListItem","Segment","Group","Label","attached","textAlign","marginBottom","secondary","clearing","floated","groupActivities","group","sub","vertical","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","userName","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","Tab","Pane","itemsPerRow","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","ProfileFollowings","menu","menuPosition","onTabChange","activeIndex","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","TestError","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.6f37127d.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n} \n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\n/*Adding token on request header*/\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    /*All responses will have a delay of 1s*/\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    \n    \n    //Search for the property coming from server side\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    /*Create toast */\n    switch(status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            /*Errors are many and they come inside an array */\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                \n                /*Send back to component */\n                /*Transform final array to pure string */\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            /*Add data to property inside server error */\n            /*This will make all components listening to the change of this property to re render */\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\n\nconst request = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => request.post<void>(`/activities`, activity),\n    update: (id: string, activity: ActivityFormValues) => request.put<void>(`/activities/${id}`, activity),\n    delete: (id: string) => request.delete<void>(`/activities/${id}`),\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => request.get<User>('/account'),\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\n    register: (user: UserFormValues) => request.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => request.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => request.delete(`/photos/${id}`),\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) => \n        request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[]\n}\n\nexport class Activity implements Activity {\n    /*Populate all of the properties from activity to activity form */\n    constructor(init?: ActivityFormValues) {\n        /*Target and source*/\n        Object.assign(this, init)\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor (activity?: ActivityFormValues) {\n        if (activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.venue = activity.venue;\n            this.city = activity.city;\n        }\n    }\n}\n\n","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayname;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string,\n    url: string,\n    isMain: boolean\n}","import { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction} from \"mobx\"\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n    /*Dictionary of activities that are kept in memory for better performance*/\n    activityRegistry = new Map<string, Activity>();\n    /*Activity selected when clicked on view button */\n    selectedActivity: Activity | undefined = undefined;\n    /*Displays form*/\n    editMode = false;\n    /*Loading indicator on buttons*/\n    loading = false;\n    /*Loading screen*/\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    //Containing all posible values from different filters\n    predicate = new Map().set('all', true);\n\n    constructor () {\n        /*Bind properties to class*/\n        makeAutoObservable(this)\n\n        //React to every time predicate keys change\n        reaction(\n            () => this.predicate.keys(), \n            () => {\n                //Restart values\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (PagingParams: PagingParams) => {\n        this.pagingParams = PagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        //Switch off all other predicates apart from the date\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        //Verify what kind of filter user wants\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n                break;\n        }\n    }\n\n    get axiosparams() {\n        const params = new URLSearchParams();\n        //Add query string parameters to the object and then add object to axios\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupActivities () {\n        /*Returning an array of activities that match a date */\n        /*Use each date inside every activity as a key */\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity]\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n    /*Arrow functions automatically bind the method to the class */\n    loadActivities = async () => {\n        this.loadingInitial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosparams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            });\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        /*Verify is activity exists in dictionary*/\n        let activity = this.getActivity(id);\n        if(activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                /*Bring from API*/\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch(error){\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        //Verify if user is logged in\n        const user = store.userStore.user;\n        if (user) {\n            //Verify if user is going to current activity\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!)\n        /*Insert into dictionary*/\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        /*Verify is activity exists in dictionary*/\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            /*RunInAction is necessary when state properties' values are changed. Otherwise, it is necessary to create methods like setLoadingInitial*/\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error){\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateActivity = async (id: string, activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(id, activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch(error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch(error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                //Current user is going then remove from attendees\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error)\n        } finally {\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            /*Returns current user */\n            const user = await agent.Account.login(creds);\n            /*Save token on current session */\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    } \n    \n    logout = () => {\n        store.commonStore.setToken(null);\n        //Find token by key\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            /*Returns current user */\n            const user = await agent.Account.register(creds);\n            /*Save token on current session */\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        //Change image shown on nav bar\n        if (this.user) this.user.image = image;\n    }\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                }\n                else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    //Add photo to user's array of photos\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        /*Update user's image*/\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            //Navbar photo\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    //Set current main photo to false\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    //Set new photo to main\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    //Update profile photo\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {   \n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n            \n        }\n    } \n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport UserStore from \"./userStore\";\nimport ProfileStore from \"./profileStore\";\nimport CommentStore from \"./commentStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore (),\n    commonStore: new CommonStore (),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor () {\n        makeAutoObservable(this);\n\n        /*This reaction only happens when this.token changes */\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    /*Set token on current session */\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n    \n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null \n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() { \n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity)\n        {\n            //Connect to hub on server\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + \"/\" + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection', error));\n            \n            //Methods called by server\n\n            this.hubConnection.on(\"LoadComments\", (comments : ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments;\n                });\n            })\n\n            this.hubConnection.on(\"ReceiveComment\", (comment : ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    //Place the comment at the start of the array\n                    this.comments.unshift(comment);\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n\n        }\n    }\n}\n\n","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer (function NavBar() {\n    const {userStore: {user, logout}} = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\n                <Menu.Item >\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'></Button>\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right'/>\n                    <Dropdown pointing='top left' text={user?.displayname}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user'/>\n                            <Dropdown.Item onClick={logout} text='Log out' icon='power'/>\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent } from 'react'\nimport { Button, Reveal } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton ({profile}: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    //User opens own profile\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{width: '100%'}}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'}/>\n            </Reveal.Content>\n            <Reveal.Content hidden style={{width: '100%'}}>\n                <Button \n                    fluid \n                    basic\n                    color={profile.following ? 'red' : 'green'} \n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import React from 'react';\nimport {Profile} from '../../app/models/profile';\nimport {observer} from 'mobx-react-lite';\nimport {Card, Icon, Image} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard ({profile}: Props) {\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'}/>\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>Bio goes here</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount === 0 ? '0 followers' : `${profile.followersCount} followers`}\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee ({attendees}: Props){\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 4\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini' \n                                circular src={attendee.image || '/assets/user.png'} \n                                bordered\n                                style={attendee.following ? styles : null}\n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n                \n            ))}\n        </List>\n    )\n})","import { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem ({activity}: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description >\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description >\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' />{format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' />{activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button as={Link} to={`/activities/${activity.id}`} color='teal' floated='right' content='View'></Button>\n            </Segment>\n        </Segment.Group>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header} from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList (){\n    const {activityStore} = useStore();\n    const {groupActivities} = activityStore;\n\n    return (\n        <>\n            {groupActivities.map(([group, activities]) => (\n                /*Whenever a component is called inside a loop, it needs an unique key */\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        /*Whenever a component is called inside a loop, it needs an unique key */\n                        <ActivityListItem key={activity.id} activity={activity}/>\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters () {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{width:'100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters'/>\n                <Menu.Item \n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header/>\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate' || new Date())}\n            />\n        </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { useStore } from '../../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityFilters from './ActivityFilters';\nimport { PagingParams } from '../../../app/models/pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceHolder';\n\nexport default observer(function ActivityDashboard() {\n    /*Custom hook that was created on store file*/\n    const {activityStore} = useStore();\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        //Get next page\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        /*Only call API if activities are not in memory */\n        if (activityRegistry.size <= 1) loadActivities();     \n    }, [activityStore, loadActivities, activityRegistry.size])\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ): (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList/>\n                    </InfiniteScroll>\n                )}\n                \n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    );\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput (props: Props) {\n    /*This will tie the data to the field input we are using*/\n    const [field, meta] = useField(props.name);\n\n    /*Doble !! converts object into a boolean (if it exists or it's undefined)*/\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm () {\n    const {userStore} = useStore();\n\n    return (\n        <Formik \n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}    \n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage \n                        name='error' render={() => \n                            <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Log in' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors : any;\n}\n\nexport default function ValidationErrors ({errors} : Props) {\n    return (\n        <Message>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header} from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm () {\n    const {userStore} = useStore();\n\n    return (\n        <Formik \n            initialValues={{displayName:'', userName: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))} \n            validationSchema = {Yup.object({\n                displayName: Yup.string().required(),\n                userName: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='userName' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage \n                        name='error' render={() => \n                            <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/loginForm';\nimport RegisterForm from '../users/registerForm';\n\nexport default observer (function HomePage (){\n    const {userStore, modalStore} = useStore();\n\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                    <Header as='h2' inverted content='Welcome to Reactivities'/>\n                    <Button as={Link} to='/activities' size='huge' inverted>\n                        Go to Activities!\n                    </Button>\n                    </>\n                ) : (\n                    <>\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                        Log in!\n                    </Button>\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                        Register!\n                    </Button>\n                    </>\n                )}\n            </Container>\n        </Segment>\n    );\n});","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}></Loader>\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea (props: Props) {\n    /*This will tie the data to the field input we are using*/\n    const [field, meta] = useField(props.name);\n\n    /*Doble !! converts object into a boolean (if it exists or it's undefined)*/\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput (props: Props) {\n    /*This will tie the data to the field input we are using*/\n    const [field, meta, helpers] = useField(props.name);\n\n    /*Doble !! converts object into a boolean (if it exists or it's undefined)*/\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\n/*Partial means that mandatory props can be now optional */\n\nexport default function MyDateInput (props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n\n    /*Doble !! converts object into a boolean (if it exists or it's undefined)*/\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport {Segment, Button, Header} from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { ActivityFormValues } from '../../../app/models/activity';\nimport { useStore } from '../../../app/stores/store';\nimport { Link } from 'react-router-dom';\nimport { Formik, Form} from 'formik';\nimport * as Yup from 'yup';\nimport {v4 as uuid} from 'uuid';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\n\nexport default observer(function ActivityForm () {\n    /*React hook that has redirection method*/\n    const history = useHistory();\n    const {activityStore} = useStore();\n    const {createActivity, updateActivity, loadActivity, loadingInitial} = activityStore;\n    /*Receive parameter from URL */\n    const {id} = useParams<{id: string}>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity])\n\n    function handleFormSubmit(activity: ActivityFormValues){\n        if(!activity.id) {\n            let newActivity = {\n                ...activity,\n                /*We create new activity id on this component in order to render activity details as soon as activity is created*/\n                id: uuid()\n            };\n            /*Redirect to activity details just after creating activity */\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            /*Redirect to activity details just after updating activity */\n            updateActivity(activity.id, activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...'></LoadingComponent>\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik \n                validationSchema = {validationSchema}\n                enableReinitialize \n                initialValues={activity} \n                onSubmit={values => handleFormSubmit(values)}>\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title'/>\n                        <MyTextArea rows={3} placeholder='Description' name='description'/>\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category'/>\n                        <MyDateInput \n                            placeholderText='Date' \n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal'/>\n                        <MyTextInput placeholder='City' name='city'/>\n                        <MyTextInput placeholder='Venue' name='venue'/>\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' \n                            positive type='submit' \n                            content='Submit'>\n                        </Button>\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel'></Button>\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup'\nimport { formatDistanceToNow } from 'date-fns/esm'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({activityId} : Props) {\n    const {commentStore} = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{border: 'none'}}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, {resetForm}) => \n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{body: ''}}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({isSubmitting, isValid, handleSubmit}) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{position: 'relative'}}>\n                                        <Loader active={isSubmitting}/>\n                                        <textarea \n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map((comment) => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \n                        ribbon color='red' content= 'Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'} \n                            floated='left' \n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} \n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n                   \n                ) : activity.isGoing ? (\n                    <Button onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled} onClick={updateAttendance} loading={loading} color='teal'>\n                        Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\nimport { useStore } from '../../../app/stores/store'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    const {userStore} = useStore();\n\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username && \n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                                {!attendee.following && attendee.username !== userStore.user?.username &&\n                                <Item.Extra style={{color: 'red'}}>Not following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid} from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails (){\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    /*Parameter sent through URL*/\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity])\n\n    if (loadingInitial || !activity) return <LoadingComponent></LoadingComponent>;\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                <ActivityDetailedHeader activity={activity}/>\n                <ActivityDetailedInfo activity={activity}/>\n                <ActivityDetailedChat activityId={activity.id}/>\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && \n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound () {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not found this .\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer( function ServerError () {\n    const {commonStore} = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error'/>\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal'/>\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","\nimport { observer } from 'mobx-react-lite';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowing () {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile}/>\n                        ))}\n                    </Card.Group> \n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, {useCallback} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge'/>\n            <Header content='Drop image here'/>\n        </div>\n    )\n}","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void\n}\n\nexport default function PhotoWidgetCropper ({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width:'100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useEffect, useState } from 'react';\nimport {Button, Grid, Header} from 'semantic-ui-react';\nimport PhotoWidgetDropzone from '../imageUpload/PhotoWidgetDropzone';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget ({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    /*Clean memory*/\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add photo'/>\n                <PhotoWidgetDropzone setFiles={setFiles}/>\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image'/>\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview}/>\n                )}\n            </Grid.Column>\n            <Grid.Column width={1}/>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload'/>\n                {files && files.length > 0 &&\n                <>\n                <div className='img-preview' style={{minHeight: 200, overflow:'hidden'}}/>\n                <Button.Group widths={2}>\n                    <Button disabled={loading} onClick={() => setFiles([])} icon='close'/>\n                    <Button loading={loading} onClick={onCrop} positive icon='check'/>\n                </Button.Group>\n                </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Card, Header, Tab, Image, Grid, Button} from 'semantic-ui-react';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos ({profile}: Props) {\n    const {profileStore: {isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto}} = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    //Necessary method to turn loading flag only to selected button because loading property is set to true\n    //whenever a button is clicked \n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos'/>\n                    {isCurrentUser && (\n                        <Button floated='right' basic \n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading}/>\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url}/>\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button \n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button \n                                                basic \n                                                color='red'\n                                                icon='trash'\n                                                name={'delete' + photo.id}\n                                                loading={target === 'delete' + photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                                disabled={photo.isMain}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent ({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <Tab.Pane>Events</Tab.Pane>},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\n    ];\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport {Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader ({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName}/>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount}/>\n                        <Statistic label='Following' value={profile.followingCount}/>\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage () {\n    /*Get username from URL */\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        //Clean up followings\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab]);\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...'/>\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile}/>\n                        <ProfileContent profile={profile}/>\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\n//Private route component helps to avoid user access URLs without being logged in\n\n//Passing the rest of the properties available inside props and send it to the root component being used \nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n\n    //Redirect to home page\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/'/>}\n        />\n    )\n\n}","import React, { Fragment, useEffect} from 'react';\nimport { Container} from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestError from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    /*This means that there is an user logged in */\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n\n  /*exact is used to avoid calling a component if paths match somehow */\n\n  /*location.key is an unique value created by component when it is mounted.\n   Key property is making a new component to be mounted every time its assigned value is changed */\n   /*We make this because if you are inside edit form and then click on new form, component with edit data must disappear and a\n   new one must be created*/\n\n   /*Switch makes each route exclusive. This means only one component can be loaded if route matches */\n\n   /*Component not foud is rendered when anyothe route is reached */\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar/>\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route \n        /*Any route that matches \"/\" + something else*/\n        path={'/(.+)'}\n        /*Render method */\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage}/>\n                <PrivateRoute path='/errors' component={TestError}/>\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0,0);\n    }, [pathname]);\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\n/*Without this import, calendar would look bad*/\nimport 'react-calendar/dist/Calendar.css'\n/*Without this import, toastify would look bad */\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n/*Created here in order to use it in other files that are not react components */\n/*This object is the one that redirects to different URLs */\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}